{"version":3,"sources":["emoji.png","logo.svg","Joke.js","Jokelist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","this","props","votes","className","onClick","upVote","style","borderColor","getColor","downVote","joke","class","getEmoji","aria-role","aria-label","Component","url","Jokelist","persistStorage","localStorage","setItem","JSON","stringify","state","jokes","getJokes","a","length","numJokes","axios","get","headers","Accept","res","push","data","id","uniqid","newJokes","setState","loading","handleClick","handleVote","delta","newState","map","j","parse","getItem","sort","b","src","emoji","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3795eea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/emoji.fd8a6e42.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\r\nimport \"./Joke.css\";\r\nclass Joke extends Component {\r\n  getColor() {\r\n    if (this.props.votes >= 15) {\r\n      return \"#4CAF50\";\r\n    } else if (this.props.votes >= 12) {\r\n      return \"#8BC34A\";\r\n    } else if (this.props.votes >= 9) {\r\n      return \"#CDDC39\";\r\n    } else if (this.props.votes >= 6) {\r\n      return \"#FFEB3B\";\r\n    } else if (this.props.votes >= 3) {\r\n      return \"#FFC107\";\r\n    } else if (this.props.votes >= 0) {\r\n      return \"#FF9800\";\r\n    } else {\r\n      return \"#f44336\";\r\n    }\r\n  }\r\n  getEmoji() {\r\n    if (this.props.votes >= 15) {\r\n      return \"em em-rolling_on_the_floor_laughing\";\r\n    } else if (this.props.votes >= 12) {\r\n      return \"em em-laughing\";\r\n    } else if (this.props.votes >= 9) {\r\n      return \"em em-smiley\";\r\n    } else if (this.props.votes >= 6) {\r\n      return \"em em-slightly_smiling_face\";\r\n    } else if (this.props.votes >= 3) {\r\n      return \"em em-neutral_face\";\r\n    } else if (this.props.votes >= 0) {\r\n      return \"em em-confused\";\r\n    } else {\r\n      return \"em em-angry\";\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Joke\">\r\n        <div className=\"Joke-buttons\">\r\n          <i className=\"fas fa-arrow-up fa-2x\" onClick={this.props.upVote}></i>\r\n          <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>\r\n            {this.props.votes}\r\n          </span>\r\n          <i\r\n            className=\"fas fa-arrow-down fa-2x\"\r\n            onClick={this.props.downVote}\r\n          ></i>\r\n        </div>\r\n        <div className=\"Joke-text\">{this.props.joke}</div>\r\n        <div className=\"Joke-emoji\">\r\n          <i\r\n            class={this.getEmoji()}\r\n            aria-role=\"presentation\"\r\n            aria-label={this.getEmoji()}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport emoji from \"./emoji.png\";\r\nimport uniqid from \"uniqid\";\r\nimport Joke from \"./Joke\";\r\nimport \"./Jokelist.css\";\r\nconst url = `https://icanhazdadjoke.com/`;\r\n\r\nclass Jokelist extends Component {\r\n  static defaultProps = {\r\n    numJokes: 10\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { jokes: [], loading: false };\r\n  }\r\n  persistStorage = () => {\r\n    localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes));\r\n  };\r\n  componentDidUpdate() {\r\n    this.persistStorage();\r\n  }\r\n  getJokes = async () => {\r\n    let jokes = [];\r\n    while (jokes.length < this.props.numJokes) {\r\n      const res = await axios.get(url, {\r\n        headers: { Accept: \"application/json\" }\r\n      });\r\n      jokes.push({\r\n        joke: res.data.joke,\r\n        id: uniqid(),\r\n        votes: 0\r\n      });\r\n    }\r\n    const newJokes = [...this.state.jokes, ...jokes];\r\n    this.setState({ jokes: newJokes, loading: false });\r\n  };\r\n  async componentDidMount() {\r\n    let jokes = JSON.parse(localStorage.getItem(\"jokes\"));\r\n    if (jokes) {\r\n      this.setState({ jokes: jokes });\r\n    } else {\r\n      this.getJokes();\r\n    }\r\n  }\r\n  handleClick = () => {\r\n    this.setState({ loading: true });\r\n    this.getJokes();\r\n  };\r\n  handleVote = (id, delta) => {\r\n    const newState = this.state.jokes.map(j =>\r\n      j.id === id ? { joke: j.joke, id: j.id, votes: j.votes + delta } : j\r\n    );\r\n    this.setState({ jokes: newState });\r\n  };\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"spinner\">\r\n          <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n          <h2 className=\"Jokelist-title\">Loading</h2>\r\n        </div>\r\n      );\r\n    }\r\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\r\n    return (\r\n      <div className=\"Jokelist\">\r\n        <div className=\"Jokelist-sidebar\">\r\n          <h1>Dad jokes!</h1>\r\n          <img src={emoji} className=\"emoji\" />\r\n          <button onClick={this.handleClick} className=\"Jokelist-btn\">\r\n            Get new jokes\r\n          </button>\r\n        </div>\r\n        <div className=\"Jokelist-jokes\">\r\n          {jokes.map(j => (\r\n            <Joke\r\n              votes={j.votes}\r\n              joke={j.joke}\r\n              key={j.id}\r\n              id={j.id}\r\n              upVote={() => this.handleVote(j.id, 1)}\r\n              downVote={() => this.handleVote(j.id, -1)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jokelist;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Jokelist from \"./Jokelist\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jokelist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}